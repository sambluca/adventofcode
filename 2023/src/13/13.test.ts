import { exercise1, parse, exercise2, lineRefects, patternReflects } from ".";
import { data } from "./data";

// check if i === next
// if does check next row
// if doesn't move on

const mockData = `#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#`;

describe("parse", () => {
  test("mockData", () => {
    const res = parse(mockData);

    expect(res[0]).toEqual([
      ["#", ".", "#", "#", ".", ".", "#", "#", "."],
      [".", ".", "#", ".", "#", "#", ".", "#", "."],
      ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
      ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
      [".", ".", "#", ".", "#", "#", ".", "#", "."],
      [".", ".", "#", "#", ".", ".", "#", "#", "."],
      ["#", ".", "#", ".", "#", "#", ".", "#", "."],
    ]);

    expect(res[1]).toEqual([
      ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
      ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
      [".", ".", "#", "#", ".", ".", "#", "#", "#"],
      ["#", "#", "#", "#", "#", ".", "#", "#", "."],
      ["#", "#", "#", "#", "#", ".", "#", "#", "."],
      [".", ".", "#", "#", ".", ".", "#", "#", "#"],
      ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
    ]);
  });
});

describe("lineReflects", () => {
  test("does not reflect", () => {
    const res = lineRefects(
      [
        ["#", ".", "#", "#", ".", ".", "#", "#", "."],
        [".", ".", "#", ".", "#", "#", ".", "#", "."],
        ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
        ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
        [".", ".", "#", ".", "#", "#", ".", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "."],
        ["#", ".", "#", ".", "#", "#", ".", "#", "."],
      ],
      0
    );

    expect(res).toEqual(false);
  });
  test("does not reflect B", () => {
    const res = lineRefects(
      [
        ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
      ],
      0
    );

    expect(res).toEqual(false);
  });

  test("does reflect", () => {
    const res = lineRefects(
      [
        ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
      ],
      4
    );

    expect(res).toEqual(true);
  });

  test("edge 2", () => {
    const res = lineRefects(
      [
        ["#", "#", ".", ".", ".", ".", "#", "#", "#"],
        [".", "#", ".", "#", ".", "#", ".", "#", "#"],
        ["#", "#", "#", ".", ".", "#", ".", ".", "."],
        ["#", "#", ".", ".", "#", "#", "#", "#", "."],
        [".", "#", "#", ".", "#", ".", ".", ".", "#"],
        ["#", ".", ".", ".", "#", ".", ".", ".", "."],
        ["#", ".", ".", ".", "#", ".", ".", ".", "."],
        [".", "#", "#", ".", "#", ".", ".", ".", "#"],
        ["#", "#", ".", ".", "#", "#", "#", "#", "."],
        ["#", "#", "#", ".", ".", "#", ".", ".", "."],
        [".", "#", "#", "#", ".", "#", ".", "#", "#"],
        ["#", "#", ".", ".", ".", ".", "#", "#", "#"],
        ["#", "#", ".", ".", ".", ".", "#", "#", "#"],
      ],
      6
    );

    expect(res).toEqual(false);
  });
});

describe("patternReflects", () => {
  test("reflects horziontal", () => {
    const res = patternReflects(
      [
        ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
      ],
      "h"
    );

    expect(res).toEqual(400);
  });

  test("reflects vertically", () => {
    const res = patternReflects(
      [
        ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
      ],
      "v"
    );

    expect(res).toEqual(4);
  });

  test("does not reflect", () => {
    const res = patternReflects(
      [
        ["#", ".", "#", "#", ".", ".", "#", "#", "."],
        [".", ".", "#", ".", "#", "#", ".", "#", "."],
        ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
        ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
        [".", ".", "#", ".", "#", "#", ".", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "."],
        ["#", ".", "#", ".", "#", "#", ".", "#", "."],
      ],
      "v"
    );

    expect(res).toEqual(0);
  });

  test("edge", () => {
    const res = patternReflects(
      [
        [
          "#",
          "#",
          "#",
          "#",
          ".",
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          "#",
          "#",
        ],
        [
          ".",
          ".",
          ".",
          ".",
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          ".",
          ".",
          ".",
          "#",
          ".",
          "#",
        ],
        [
          "#",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "#",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          "#",
          "#",
          ".",
        ],
        [
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          ".",
        ],
        [
          "#",
          "#",
          "#",
          ".",
          ".",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          "#",
          "#",
        ],
        [
          "#",
          "#",
          "#",
          ".",
          ".",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          "#",
          "#",
        ],
        [
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          ".",
        ],
        [
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          "#",
          ".",
        ],
        [
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          "#",
          ".",
        ],
        [
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          ".",
        ],
        [
          "#",
          "#",
          "#",
          ".",
          ".",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          "#",
          "#",
        ],
        [
          "#",
          "#",
          "#",
          ".",
          ".",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          "#",
          "#",
        ],
        [
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          ".",
        ],
      ],
      "h"
    );

    expect(res).toEqual(800);
  });
});

describe("exercise1", () => {
  test("mockData", () => {
    const res = exercise1(mockData);

    expect(res).toEqual(405);
  });

  test.skip("data", () => {
    const res = exercise1(data);

    expect(res).toEqual(34100);
  });

  test("edge", () => {
    const res = exercise1(`...#...#..##.
    .##..##..#..#
    ..##...#.....
    ....###.#.#..
    #.##.#....##.
    .##.#.#######
    ###.#.#......
    ###.#.#......
    .##.#.#######`);

    expect(res).toEqual(700);
  });
});

describe("exercise2", () => {
  test("mockData", () => {
    const res = exercise2(mockData);

    expect(res).toEqual();
  });

  test.skip("data", () => {
    const res = exercise2(data);

    expect(res).toEqual();
  });
});
