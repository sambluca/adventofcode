import { exercise1, parse, exercise2, lineReflects, patternReflects } from ".";
import { data } from "./data";

const mockData = `#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#`;

describe("parse", () => {
  test("mockData", () => {
    const res = parse(mockData);

    expect(res[0]).toEqual([
      ["#", ".", "#", "#", ".", ".", "#", "#", "."],
      [".", ".", "#", ".", "#", "#", ".", "#", "."],
      ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
      ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
      [".", ".", "#", ".", "#", "#", ".", "#", "."],
      [".", ".", "#", "#", ".", ".", "#", "#", "."],
      ["#", ".", "#", ".", "#", "#", ".", "#", "."],
    ]);

    expect(res[1]).toEqual([
      ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
      ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
      [".", ".", "#", "#", ".", ".", "#", "#", "#"],
      ["#", "#", "#", "#", "#", ".", "#", "#", "."],
      ["#", "#", "#", "#", "#", ".", "#", "#", "."],
      [".", ".", "#", "#", ".", ".", "#", "#", "#"],
      ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
    ]);
  });
});

describe("lineReflects", () => {
  test("does not reflect", () => {
    const res = lineReflects(
      [
        ["#", ".", "#", "#", ".", ".", "#", "#", "."],
        [".", ".", "#", ".", "#", "#", ".", "#", "."],
        ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
        ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
        [".", ".", "#", ".", "#", "#", ".", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "."],
        ["#", ".", "#", ".", "#", "#", ".", "#", "."],
      ],
      0
    );

    expect(res).toEqual(false);
  });
  test("does not reflect B", () => {
    const res = lineReflects(
      [
        ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
      ],
      0
    );

    expect(res).toEqual(false);
  });

  test("does reflect", () => {
    const res = lineReflects(
      [
        ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
      ],
      4
    );

    expect(res).toEqual(true);
  });

  test("edge 2", () => {
    const res = lineReflects(
      [
        ["#", "#", ".", ".", ".", ".", "#", "#", "#"],
        [".", "#", ".", "#", ".", "#", ".", "#", "#"],
        ["#", "#", "#", ".", ".", "#", ".", ".", "."],
        ["#", "#", ".", ".", "#", "#", "#", "#", "."],
        [".", "#", "#", ".", "#", ".", ".", ".", "#"],
        ["#", ".", ".", ".", "#", ".", ".", ".", "."],
        ["#", ".", ".", ".", "#", ".", ".", ".", "."],
        [".", "#", "#", ".", "#", ".", ".", ".", "#"],
        ["#", "#", ".", ".", "#", "#", "#", "#", "."],
        ["#", "#", "#", ".", ".", "#", ".", ".", "."],
        [".", "#", "#", "#", ".", "#", ".", "#", "#"],
        ["#", "#", ".", ".", ".", ".", "#", "#", "#"],
        ["#", "#", ".", ".", ".", ".", "#", "#", "#"],
      ],
      6
    );

    expect(res).toEqual(false);
  });

  describe("smudge", () => {
    test("mockData pattern 1", () => {
      const res = lineReflects(
        [
          ["#", ".", "#", "#", ".", ".", "#", "#", "."],
          [".", ".", "#", ".", "#", "#", ".", "#", "."],
          ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
          ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
          [".", ".", "#", ".", "#", "#", ".", "#", "."],
          [".", ".", "#", "#", ".", ".", "#", "#", "."],
          ["#", ".", "#", ".", "#", "#", ".", "#", "."],
        ],
        3,
        true
      );

      expect(res).toEqual(true);
    });

    test("data 1", () => {
      const res = lineReflects(
        parse(`####....####.#.##
      .....#..#.#...#.#
      #......##..#.###.
      ...####.#.##.#...
      ###...##.#..#.###
      ###..###.#..#.###
      ...####.#.##.#...
      .#..#......#####.
      .#..#......#####.
      ...####.#.##.#...
      ###..###.#..#.###
      ###...##.#..#.###
      ...####.#.##.#...
      `)[0],
        5,
        true
      );

      expect(res).toEqual(false);
    });
    test("data 12", () => {
      const res = lineReflects(
        parse(`####....####.#.##
      .....#..#.#...#.#
      #......##..#.###.
      ...####.#.##.#...
      ###...##.#..#.###
      ###..###.#..#.###
      ...####.#.##.#...
      .#..#......#####.
      .#..#......#####.
      ...####.#.##.#...
      ###..###.#..#.###
      ###...##.#..#.###
      ...####.#.##.#...`)[0],
        11,
        true
      );

      expect(res).toEqual(true);
    });

    test("smudge2", () => {
      const res = lineReflects(
        parse(`...#..#
  #.##..#
  #.##..#
  ...#..#
  ####..#
  #......
  #.##..#
  .##.##.
  .###..#
  ..#....
  #.#.##.
  ##....#
  ..##..#`)[0],
        8,
        true
      );

      expect(res).toEqual(false);
    });
  });
});

describe("patternReflects", () => {
  test("reflects horziontal", () => {
    const res = patternReflects(
      [
        ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
      ],
      "h"
    );

    expect(res).toEqual(400);
  });

  test("reflects vertically", () => {
    const res = patternReflects(
      [
        ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        ["#", "#", "#", "#", "#", ".", "#", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "#"],
        ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
      ],
      "v"
    );

    expect(res).toEqual(4);
  });

  test("does not reflect", () => {
    const res = patternReflects(
      [
        ["#", ".", "#", "#", ".", ".", "#", "#", "."],
        [".", ".", "#", ".", "#", "#", ".", "#", "."],
        ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
        ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
        [".", ".", "#", ".", "#", "#", ".", "#", "."],
        [".", ".", "#", "#", ".", ".", "#", "#", "."],
        ["#", ".", "#", ".", "#", "#", ".", "#", "."],
      ],
      "v"
    );

    expect(res).toEqual(0);
  });

  test("edge", () => {
    const res = patternReflects(
      [
        [
          "#",
          "#",
          "#",
          "#",
          ".",
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          "#",
          "#",
        ],
        [
          ".",
          ".",
          ".",
          ".",
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          ".",
          ".",
          ".",
          "#",
          ".",
          "#",
        ],
        [
          "#",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "#",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          "#",
          "#",
          ".",
        ],
        [
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          ".",
        ],
        [
          "#",
          "#",
          "#",
          ".",
          ".",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          "#",
          "#",
        ],
        [
          "#",
          "#",
          "#",
          ".",
          ".",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          "#",
          "#",
        ],
        [
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          ".",
        ],
        [
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          "#",
          ".",
        ],
        [
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          ".",
          ".",
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          "#",
          ".",
        ],
        [
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          ".",
        ],
        [
          "#",
          "#",
          "#",
          ".",
          ".",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          "#",
          "#",
        ],
        [
          "#",
          "#",
          "#",
          ".",
          ".",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          "#",
          ".",
          "#",
          "#",
          "#",
        ],
        [
          ".",
          ".",
          ".",
          "#",
          "#",
          "#",
          "#",
          ".",
          "#",
          ".",
          "#",
          "#",
          ".",
          "#",
          ".",
          ".",
          ".",
        ],
      ],
      "h"
    );

    expect(res).toEqual(800);
  });

  test("smudge1", () => {
    const res = patternReflects(
      parse(`####....####.#.##
      .....#..#.#...#.#
      #......##..#.###.
      ...####.#.##.#...
      ###...##.#..#.###
      ###..###.#..#.###
      ...####.#.##.#...
      .#..#......#####.
      .#..#......#####.
      ...####.#.##.#...
      ###..###.#..#.###
      ###...##.#..#.###
      ...####.#.##.#...`)[0],
      "h",
      true
    );

    expect(res).toEqual(1100);
  });

  test("smudge2", () => {
    const res = patternReflects(
      parse(`...#..#
#.##..#
#.##..#
...#..#
####..#
#......
#.##..#
.##.##.
.###..#
..#....
#.#.##.
##....#
..##..#`)[0],
      "h",
      true
    );

    expect(res).toEqual(0);
  });
});

describe("exercise1", () => {
  test("mockData", () => {
    const res = exercise1(mockData);

    expect(res).toEqual(405);
  });

  test("data", () => {
    const res = exercise1(data);

    expect(res).toEqual(34100);
  });

  test("edge", () => {
    const res = exercise1(`...#...#..##.
    .##..##..#..#
    ..##...#.....
    ....###.#.#..
    #.##.#....##.
    .##.#.#######
    ###.#.#......
    ###.#.#......
    .##.#.#######`);

    expect(res).toEqual(700);
  });
});

describe("exercise2", () => {
  test("mockData", () => {
    const res = exercise2(mockData);

    expect(res).toEqual(400);
  });

  test("data", () => {
    const res = exercise2(data);

    expect(res).toEqual(33106);
  });
});
