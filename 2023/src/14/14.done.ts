import { exercise1, parse, exercise2, moveUp, moveLineEast, cycle } from ".";
import { data } from "./data";

const mockData = `O....#....
O.OO#....#
.....##...
OO.#O....O
.O.....O#.
O.#..O.#.#
..O..#O..O
.......O..
#....###..
#OO..#....`;

const parsedMockData = [
  ["O", ".", ".", ".", ".", "#", ".", ".", ".", "."],
  ["O", ".", "O", "O", "#", ".", ".", ".", ".", "#"],
  [".", ".", ".", ".", ".", "#", "#", ".", ".", "."],
  ["O", "O", ".", "#", "O", ".", ".", ".", ".", "O"],
  [".", "O", ".", ".", ".", ".", ".", "O", "#", "."],
  ["O", ".", "#", ".", ".", "O", ".", "#", ".", "#"],
  [".", ".", "O", ".", ".", "#", "O", ".", ".", "O"],
  [".", ".", ".", ".", ".", ".", ".", "O", ".", "."],
  ["#", ".", ".", ".", ".", "#", "#", "#", ".", "."],
  ["#", "O", "O", ".", ".", "#", ".", ".", ".", "."],
];

describe("parse", () => {
  test("mockData", () => {
    const res = parse(mockData);

    expect(res).toEqual(parsedMockData);
  });
});

describe("moveLineEast", () => {
  test("mockData col 1", () => {
    const res = moveLineEast([
      "#",
      "#",
      ".",
      ".",
      "O",
      ".",
      "O",
      ".",
      "O",
      "O",
    ]);

    expect(res).toEqual(["#", "#", ".", ".", ".", ".", "O", "O", "O", "O"]);
  });

  test("moveLine east", () => {
    const res = moveLineEast([
      ".",
      ".",
      ".",
      ".",
      ".",
      ".",
      "O",
      ".",
      "#",
      ".",
    ]);

    expect(res).toEqual([".", ".", ".", ".", ".", ".", ".", "O", "#", "."]);
  });
});
describe("moveUp", () => {
  test("mockData", () => {
    const res = moveUp(parsedMockData);

    expect(res).toEqual([
      ["O", "O", "O", "O", ".", "#", ".", "O", ".", "."],
      ["O", "O", ".", ".", "#", ".", ".", ".", ".", "#"],
      ["O", "O", ".", ".", "O", "#", "#", ".", ".", "O"],
      ["O", ".", ".", "#", ".", "O", "O", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
      [".", ".", "#", ".", ".", ".", ".", "#", ".", "#"],
      [".", ".", "O", ".", ".", "#", ".", "O", ".", "O"],
      [".", ".", "O", ".", ".", ".", ".", ".", ".", "."],
      ["#", ".", ".", ".", ".", "#", "#", "#", ".", "."],
      ["#", ".", ".", ".", ".", "#", ".", ".", ".", "."],
    ]);
  });
});

describe("cycle", () => {
  test("mockData", () => {
    const res = cycle(parsedMockData);

    expect(res).toEqual([
      [".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
      [".", ".", ".", ".", "#", ".", ".", ".", "O", "#"],
      [".", ".", ".", "O", "O", "#", "#", ".", ".", "."],
      [".", "O", "O", "#", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", "O", "O", "O", "#", "."],
      [".", "O", "#", ".", ".", ".", "O", "#", ".", "#"],
      [".", ".", ".", ".", "O", "#", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", "O", "O", "O", "O"],
      ["#", ".", ".", ".", "O", "#", "#", "#", ".", "."],
      ["#", ".", ".", "O", "O", "#", ".", ".", ".", "."],
    ]);
  });

  test("second cycle", () => {
    const res = cycle([
      [".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
      [".", ".", ".", ".", "#", ".", ".", ".", "O", "#"],
      [".", ".", ".", "O", "O", "#", "#", ".", ".", "."],
      [".", "O", "O", "#", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", "O", "O", "O", "#", "."],
      [".", "O", "#", ".", ".", ".", "O", "#", ".", "#"],
      [".", ".", ".", ".", "O", "#", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", "O", "O", "O", "O"],
      ["#", ".", ".", ".", "O", "#", "#", "#", ".", "."],
      ["#", ".", ".", "O", "O", "#", ".", ".", ".", "."],
    ]);

    const x = [
      [".", ".", ".", ".", ".", "#", ".", ".", ".", "."],
      [".", ".", ".", ".", "#", ".", ".", ".", "O", "#"],
      [".", ".", ".", ".", ".", "#", "#", ".", ".", "."],
      [".", ".", "O", "#", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", "O", "O", "O", "#", "."],
      [".", "O", "#", ".", ".", ".", "O", "#", ".", "#"],
      [".", ".", ".", ".", "O", "#", ".", ".", ".", "O"],
      [".", ".", ".", ".", ".", ".", ".", "O", "O", "O"],
      ["#", ".", ".", "O", "O", "#", "#", "#", ".", "."],
      ["#", ".", "O", "O", "O", "#", ".", ".", ".", "O"],
    ];
    expect(res).toEqual(x);
  });
});
describe("exercise1", () => {
  test("mockData", () => {
    const res = exercise1(mockData);

    expect(res).toEqual(136);
  });

  test("data", () => {
    const res = exercise1(data);

    expect(res).toEqual(105208);
  });
});

describe("exercise2", () => {
  test("mockData", () => {
    const res = exercise2(mockData, 1000000000);

    expect(res).toEqual(64);
  });

  test("data", () => {
    // takes 4 ish seconds to run which im fine with
    const res = exercise2(data, 1000000000);

    expect(res).toEqual(102943);
  });
});
