import { exercise1, parse, exercise2 } from ".";
import { data } from "./data";

const smallMockData = `########
#..O.O.#
##@.O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

<^^>>>vv<v>>v<<`;

const bigMockData = `##########
#..O..O.O#
#......O.#
#.OO..O.O#
#..O@..O.#
#O#..O...#
#O..O..O.#
#.OO.O.OO#
#....O...#
##########

<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^
vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v
><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<
<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^
^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><
^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^
>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^
<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>
^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>
v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^`;

describe("parse", () => {
  test("bigMockData", () => {
    const [grid] = parse(bigMockData);

    expect(grid).toEqual([
      ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
      ["#", ".", ".", "O", ".", ".", "O", ".", "O", "#"],
      ["#", ".", ".", ".", ".", ".", ".", "O", ".", "#"],
      ["#", ".", "O", "O", ".", ".", "O", ".", "O", "#"],
      ["#", ".", ".", "O", "@", ".", ".", "O", ".", "#"],
      ["#", "O", "#", ".", ".", "O", ".", ".", ".", "#"],
      ["#", "O", ".", ".", "O", ".", ".", "O", ".", "#"],
      ["#", ".", "O", "O", ".", "O", ".", "O", "O", "#"],
      ["#", ".", ".", ".", ".", "O", ".", ".", ".", "#"],
      ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
    ]);
  });

  test("bigMockData part2", () => {
    const [grid] = parse(bigMockData, true);

    expect(grid).toEqual([
      [
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
      ],
      [
        "#",
        "#",
        ".",
        ".",
        ".",
        ".",
        "[",
        "]",
        ".",
        ".",
        ".",
        ".",
        "[",
        "]",
        ".",
        ".",
        "[",
        "]",
        "#",
        "#",
      ],
      [
        "#",
        "#",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        "[",
        "]",
        ".",
        ".",
        "#",
        "#",
      ],
      [
        "#",
        "#",
        ".",
        ".",
        "[",
        "]",
        "[",
        "]",
        ".",
        ".",
        ".",
        ".",
        "[",
        "]",
        ".",
        ".",
        "[",
        "]",
        "#",
        "#",
      ],
      [
        "#",
        "#",
        ".",
        ".",
        ".",
        ".",
        "[",
        "]",
        "@",
        ".",
        ".",
        ".",
        ".",
        ".",
        "[",
        "]",
        ".",
        ".",
        "#",
        "#",
      ],
      [
        "#",
        "#",
        "[",
        "]",
        "#",
        "#",
        ".",
        ".",
        ".",
        ".",
        "[",
        "]",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        "#",
        "#",
      ],
      [
        "#",
        "#",
        "[",
        "]",
        ".",
        ".",
        ".",
        ".",
        "[",
        "]",
        ".",
        ".",
        ".",
        ".",
        "[",
        "]",
        ".",
        ".",
        "#",
        "#",
      ],
      [
        "#",
        "#",
        ".",
        ".",
        "[",
        "]",
        "[",
        "]",
        ".",
        ".",
        "[",
        "]",
        ".",
        ".",
        "[",
        "]",
        "[",
        "]",
        "#",
        "#",
      ],
      [
        "#",
        "#",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        "[",
        "]",
        ".",
        ".",
        ".",
        ".",
        ".",
        ".",
        "#",
        "#",
      ],
      [
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
        "#",
      ],
    ]);
  });
});

describe("exercise1", () => {
  test("smallMockData", () => {
    const res = exercise1(smallMockData);

    expect(res).toEqual(2028);
  });

  test("bigMockData", () => {
    const res = exercise1(bigMockData);

    expect(res).toEqual(10092);
  });

  test("data", () => {
    const res = exercise1(data);

    expect(res).toEqual(1526673);
  });
});

describe("exercise2", () => {
  const smallMockData2 = `#######
#...#.#
#.....#
#..OO@#
#..O..#
#.....#
#######

<vv<<^^<<^^`;

  test("smallMockData2", () => {
    const res = exercise2(smallMockData2);

    expect(res).toEqual(618);
  });

  test("bigMockData", () => {
    const res = exercise2(bigMockData);

    expect(res).toEqual(9021);
  });

  test("data", () => {
    const res = exercise2(data);

    // 1537052 too high
    // 1535509
    expect(res).toEqual(1535509);
  });
});
